登录 MySQL:
> mysql -u username -p
> password:*****
mysql> 
输入 exit 或 quit 退出登录

添加用户(需修改my.ini,解除严格模式)
1.
mysql> use mysql
Database changed
mysql> insert into user(host,user,password,select_priv,insert_priv,update_priv) values('localhost','guest',MD5('guest'),'Y','Y','Y');
2.
mysql> grant select,insert,update,delete,create,drop
    -> on TUTORAILS.*
    -> TO 'guest'@'localhost'
    -> IDENTIFIED BY 'guest';

(stuD为数据库名,stuT为表名)

use databaseName: use stuD;
show databases:列出所有数据库
show tables(要先选择数据库):
    use stuD;
    show tables;
show columns from stuT:显示表的列
show index from stuT:显示表的索引
show table status from mysql like 'user%'\G;    //展示mysql数据库以'user'开头的表的状态,\G:查询结果按列打印

CREATE DATABASE 数据库名;

CREATE TABLE IF NOT EXISTS `runoob_tbl`(
   `runoob_id` INT UNSIGNED AUTO_INCREMENT,
   `runoob_title` VARCHAR(100) NOT NULL,
   `runoob_author` VARCHAR(40) NOT NULL,
   `submission_date` DATE,
   PRIMARY KEY ( `runoob_id` )
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
如果你不想字段为 NULL 可以设置字段的属性为 NOT NULL， 在操作数据库时如果输入该字段的数据为NULL ，就会报错。
AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1。
PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。
ENGINE 设置存储引擎，CHARSET 设置编码。

DROP TABLE table_name ; //删除表
truncate table table_name;  //删除数据,保存结构
delete from student;

INSERT INTO table_name ( field1, field2,...fieldN ) VALUES( value1, value2,...valueN ),( value1, value2,...valueN );

SELECT column_name,column_name
FROM table_name
[WHERE Clause]
[LIMIT N][ OFFSET M]
WHERE [condition]
你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。
limit N,M : 相当于 offset N limit M , 从第 N 条记录开始, 返回 M 条记录

UPDATE table_name SET field1=new-value1, field2=new-value2
[WHERE Clause]

DELETE FROM table_name [WHERE Clause]

SELECT expression1, expression2, ... expression_n
FROM tables
[WHERE conditions]
UNION [ALL | DISTINCT]
SELECT expression1, expression2, ... expression_n
FROM tables
[WHERE conditions];
UNION:删除重复数据
UNION ALL:不删除重复数据

SELECT field1, field2,...fieldN table_name1, table_name2...
ORDER BY field1, [field2...] [ASC [DESC]]

MySQL 拼音排序
gbk:
SELECT * 
FROM runoob_tbl
ORDER BY runoob_title;
utf8:
SELECT * 
FROM runoob_tbl
ORDER BY CONVERT(runoob_title using gbk);

SELECT column_name, function(column_name)
FROM table_name
WHERE column_name operator value
GROUP BY column_name
WITH ROLLUP;
WITH ROLLUP:相当于总计功能

SELECT name ,sum(*)  FROM employee_tbl 
WHERE id<>1 
GROUP BY name  
HAVING sum(*)>5 
ORDER BY sum(*) DESC;

IS NULL: 当列的值是 NULL,此运算符返回 true。
IS NOT NULL: 当列的值不为 NULL, 运算符返回 true。
<=>: 比较操作符（不同于=运算符），当比较的的两个值为 NULL 时返回 true。
在 MySQL 中，NULL 值与任何其它值的比较（即使是 NULL）永远返回 false，即 NULL = NULL 返回false

^	        匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\n' 或 '\r' 之后的位置。
$	        匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\n' 或 '\r' 之前的位置。
.	        匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用象 '[.\n]' 的模式。[...]	字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 "plain" 中的 'a'。[^...]	负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 "plain" 中的'p'。
p1|p2|p3	匹配 p1 或 p2 或 p3。例如，'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 "food"。
*	        匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。
+	        匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。
{n}	n       是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。
{n,m}	    m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。

在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。
事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。
事务用来管理 insert,update,delete 语句

一般来说，事务是必须满足4个条件（ACID）：：原子性（Atomicity，或称不可分割性）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。
原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。
一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。
隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。
持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。

修改存储引擎
alter table tableName engine=myisam;
删除外键约束
alter table tableName drop foreign key keyName;

